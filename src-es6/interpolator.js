// Generated by CoffeeScript 2.2.2
var Interpolator;

import EventManager from "./events/event-manager";

export default Interpolator = (function() {
  class Interpolator {
    constructor(renderRate, updateRate) {
      this._start = this._start.bind(this);
      this.update = this.update.bind(this);
      this.renderRate = renderRate;
      this.updateRate = updateRate;
      this.startTime = new Date().getTime();
      this.updateTime = 1000.0 / this.updateRate;
      this.renderTime = 1000.0 / this.renderRate;
      this.curTime = this.lastTime = this.timeStamp = 0;
      this.started = false;
      EventManager.eventify(this);
    }

    start() {
      this.started = true;
      return this._start();
    }

    _start() {
      if (this.started) {
        this.update();
        return requestAnimationFrame(this._start);
      }
    }

    stop() {
      return this.started = false;
    }

    static interpolate(startVal, endVal, fraction) {
      return startVal + (fraction * (endVal - startVal));
    }

    update() {
      if (this.lockFPS) {
        this.curTime = new Date().getTime() - this.startTime;
      } else {
        this.curTime += this.renderTime;
      }
      if (this.curTime - this.lastTime >= this.updateTime) {
        this.fire("before-update");
        this.timeStamp = this.curTime;
        while (this.curTime - this.lastTime >= this.updateTime) {
          this.fire("update");
          this.lastTime += this.updateTime;
        }
        this.fire("after-update");
      }
      this.interpolation = Math.min(1.0, (this.curTime - this.timeStamp) / this.updateTime);
      return this.fire("render", [this.interpolation]);
    }

  };

  Interpolator.prototype.interpolation = 0.0;

  Interpolator.prototype.lockFPS = false;

  return Interpolator;

}).call(this);
