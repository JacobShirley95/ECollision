// Generated by CoffeeScript 2.2.2
var Simulation;

import Widget from "./widget.js";

import Particle from "../objects/particle.js";

import EventManager from "../events/event-manager.js";

import EaselJSRenderer from "./renderer/easeljs/easeljs-renderer.js";

export default Simulation = (function() {
  class Simulation extends Widget {
    constructor(canvasName, engine, interpolator, settings) {
      super(canvasName);
      this.engine = engine;
      this.interpolator = interpolator;
      this.settings = settings;
      this.engine.width = this.width;
      this.engine.height = this.height;
      this.renderer = new EaselJSRenderer(this.stage, this.interpolator, this.settings);
      EventManager.eventify(this);
    }

    resize(newWidth, newHeight) {
      super.resize(newWidth, newHeight);
      return this.engine.setBounds(this.width, this.height);
    }

    addParticle(x, y, mass, radius, style) {
      var particle, result;
      particle = new Particle(x, y, radius, style, this.settings);
      particle.mass = mass;
      result = this.renderer.addParticle(particle);
      result.addListener("select", (ev, particle) => {
        this.fire("particle-selected", [particle.particle]);
        if (this.selected !== null) {
          this.selected.renderer.deselect();
        }
        return this.selected = particle.particle;
      }).addListener("deselect", (ev, particle) => {
        this.selected = null;
        return this.fire("particle-deselected", [particle.particle]);
      });
      this.engine.particles.push(particle);
      return particle;
    }

    removeParticle(index) {
      var i, j, len, p, ref, results;
      if (typeof index === "object") {
        this.renderer.removeParticle(index);
        ref = this.engine.particles;
        results = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          p = ref[i];
          if (p === index) {
            this.engine.particles.splice(i, 1);
            break;
          } else {
            results.push(void 0);
          }
        }
        return results;
      } else {
        this.renderer.removeParticle(this.engine.particles[index]);
        return this.engine.particles.splice(index, 1);
      }
    }

    loadParticles(toBeLoaded) {
      var j, len, obj, particle, results;
      this.restart();
      results = [];
      for (j = 0, len = toBeLoaded.length; j < len; j++) {
        obj = toBeLoaded[j];
        particle = this.addParticle(obj.x, obj.y, obj.mass, obj.radius, obj.style);
        particle.xVel = obj.xVel;
        particle.yVel = obj.yVel;
        results.push(particle.cOR = obj.cOR);
      }
      return results;
    }

    saveParticles(saved) {
      var j, len, particle, ref, results;
      ref = this.engine.particles;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        particle = ref[j];
        results.push(saved.push(particle.copy()));
      }
      return results;
    }

    removeSelected() {
      var i, j, len, particle, ref;
      if (this.selected !== null) {
        ref = this.particles;
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          particle = ref[i];
          if (particle === this.selected) {
            this.removeParticle(i);
          }
        }
        return this.selected = null;
      }
    }

    getSelected() {
      return this.selected;
    }

    restart() {
      this.renderer.clear();
      this.selected = null;
      this.engine.reset();
      return this.fire("restart");
    }

    draw(interpolation) {
      this.renderer.draw(interpolation);
      return this.fire("draw");
    }

  };

  Simulation.prototype.selected = null;

  return Simulation;

}).call(this);
