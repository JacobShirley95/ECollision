// Generated by CoffeeScript 2.2.2
var EaselJSRenderer;

import ParticleRenderer from "./particle-renderer";

import SimulationRenderer from "../simulation-renderer";

export default EaselJSRenderer = class EaselJSRenderer extends SimulationRenderer {
  constructor(stage, interpolator, settings) {
    super(interpolator);
    this.stage = stage;
    this.settings = settings;
    this.renderObjs = [];
    this.interpolator.addListener("before-update", () => {
      var j, len, particle, ref, results;
      ref = this.renderObjs;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        particle = ref[j];
        results.push(particle.capture());
      }
      return results;
    });
  }

  addParticle(particle) {
    var pr;
    pr = new ParticleRenderer(particle, this.settings.simulation.enableSelection);
    particle.renderer = pr;
    this.stage.addChild(pr.displayObj);
    this.renderObjs.push(pr);
    return pr;
  }

  getParticlesAtPos(x, y) {
    var j, len, list, ref, renderable;
    list = [];
    ref = this.renderObjs;
    for (j = 0, len = ref.length; j < len; j++) {
      renderable = ref[j];
      if (this.isParticleAtPos(renderable, x, y)) {
        list.push(renderable);
      }
    }
    return list;
  }

  isParticleAtPos(particle, x, y) {
    var dx, dy, p;
    p = particle.particle;
    dx = p.x - x;
    dy = p.y - y;
    if (dx * dx + dy * dy <= p.radius * p.radius) {
      return true;
    }
    return false;
  }

  removeParticles(particles) {}

  //todo
  removeParticle(particle) {
    var i, j, len, p, ref, results;
    ref = this.renderObjs;
    //console.log("removing particle")
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      p = ref[i];
      if (particle === p.particle) {
        particle.renderer = null;
        this.stage.removeChild(p.displayObj);
        this.renderObjs.splice(i, 1);
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  getParticles() {
    return this.renderObjs;
  }

  clear() {
    var j, len, p, ref;
    ref = this.renderObjs;
    for (j = 0, len = ref.length; j < len; j++) {
      p = ref[j];
      this.stage.removeChild(p.displayObj);
      p.particle = null;
    }
    return this.renderObjs = [];
  }

  draw(interpolation) {
    var j, len, particle, ref;
    ref = this.renderObjs;
    for (j = 0, len = ref.length; j < len; j++) {
      particle = ref[j];
      particle.draw(interpolation);
    }
    return this.stage.update();
  }

};
