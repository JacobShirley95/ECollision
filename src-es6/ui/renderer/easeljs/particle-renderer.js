// Generated by CoffeeScript 2.2.2
var ParticleRenderer;

import Renderer from "../renderer";

import Point2D from "../../../math/point-2d";

import EventManager from "../../../events/event-manager";

import Interpolator from "../../../interpolator";

export default ParticleRenderer = (function() {
  class ParticleRenderer extends Renderer {
    constructor(particle, enableSelection) {
      super();
      this.particle = particle;
      this.enableSelection = enableSelection;
      this.displayObj = new createjs.Shape();
      this.lastX = this.particle.x;
      this.lastY = this.particle.y;
      this.selected = false;
      this.displayObj.x = this.particle.x;
      this.displayObj.y = this.particle.y;
      this.displayObj.addEventListener("click", (ev) => {
        if (this.selected) {
          this.fire("deselect", [ev, this]);
          return this.deselect();
        } else {
          this.fire("select", [ev, this]);
          return this.select();
        }
      });
      this.tail = new createjs.Shape();
      this.tail.x = this.particle.x;
      this.tail.y = this.particle.y;
      //@displayObj.addChild(@tail)
      EventManager.eventify(this);
    }

    capture() {
      var len;
      this.lastX = this.particle.x;
      this.lastY = this.particle.y;
      if (this.enableSelection && this.selected) {
        this.curPos++;
        this.curPos %= 20;
        len = this.pastPositions.length;
        if (len < 20) {
          return this.pastPositions.push(new Point2D(this.x, this.y));
        } else {
          return this.pastPositions[this.curPos] = new Point2D(this.x, this.y);
        }
      }
    }

    select() {
      return this.selected = true;
    }

    deselect() {
      this.selected = false;
      return this.pastPositions = [];
    }

    draw(interpolation) {
      var col, graphics, i, j, len, newX, newY, p, px, py, r_a, ref, results;
      newX = this.particle.x;
      newY = this.particle.y;
      if (interpolation > 0.0) {
        newX = Interpolator.interpolate(this.lastX, newX, interpolation);
        newY = Interpolator.interpolate(this.lastY, newY, interpolation);
      }
      this.displayObj.x = newX;
      this.displayObj.y = newY;
      //console.log(@particle.x)
      graphics = this.displayObj.graphics;
      graphics.clear().beginFill(this.particle.style).drawCircle(0, 0, this.particle.radius).endFill();
      if (this.enableSelection && this.selected) {
        graphics.beginStroke("blue").setStrokeStyle(3).drawCircle(0, 0, this.particle.radius).endStroke();
        graphics = this.tail.graphics;
        graphics.clear();
        len = this.pastPositions.length;
        results = [];
        for (i = j = 0, ref = len - 1; 1 !== 0 && (1 > 0 ? j <= ref : j >= ref); i = j += 1) {
          p = this.pastPositions[(i + this.curPos) % len];
          px = p.x - this.particle.x;
          py = p.y - this.particle.y;
          r_a = i / len;
          col = "rgba(100, 100, 100, " + r_a + ")";
          results.push(graphics.beginStroke(col).drawCircle(px, py, this.particle.radius).endStroke());
        }
        return results;
      }
    }

  };

  ParticleRenderer.prototype.pastPositions = [];

  ParticleRenderer.prototype.curPos = 0;

  return ParticleRenderer;

}).call(this);
