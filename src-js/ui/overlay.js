// Generated by CoffeeScript 1.10.0
(function() {
  var Overlay, Particle, Widget, gcd,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Widget = require("./widget");

  Particle = require("../objects/particle");

  gcd = function(a, b) {
    if (!b) {
      return a;
    }
    return gcd(b, a % b);
  };

  module.exports = Overlay = (function(superClass) {
    extend(Overlay, superClass);

    Overlay.INDEX_PLACE = 0;

    Overlay.INDEX_VELOCITY = 1;

    Overlay.INDEX_MODIFY = 2;

    Overlay.MODE_ADD = 0;

    Overlay.MODE_EDIT = 1;

    Overlay.prototype.errorTimer = 0;

    Overlay.prototype.showError = false;

    Overlay.prototype.tempObject = null;

    function Overlay(canvasName, simulation, settings) {
      this.simulation = simulation;
      this.settings = settings;
      this.handleClick = bind(this.handleClick, this);
      this.handleMouseMove = bind(this.handleMouseMove, this);
      this.handleMouseWheel = bind(this.handleMouseWheel, this);
      Overlay.__super__.constructor.call(this, canvasName);
      this.modeText = new createjs.Text("", "bold 15px Arial");
      this.modeText.x = 0;
      this.modeText.y = 10;
      this.velocityLine = new createjs.Shape();
      this.velText = new createjs.Text("", "bold 15px Arial");
      this.errorText = new createjs.Text("", "bold 15px Arial", "red");
      this.mouseX = this.crossX = this.width / 2;
      this.mouseY = this.crossY = this.height / 2;
      this.mode = -1;
      this.index = 0;
      this.modeText.x = (this.width / 2) - 40;
      this.interval = gcd(this.width, this.height);
      this.hide();
      $(document).keydown((function(_this) {
        return function(event) {
          _this.freePlace = event.ctrlKey;
          return _this.copyPlace = event.shiftKey;
        };
      })(this));
      $(document).keyup((function(_this) {
        return function(event) {
          _this.freePlace = false;
          return _this.copyPlace = false;
        };
      })(this));
      this.canvas.bind('contextmenu', function(e) {
        return false;
      });
      this.mouseX = this.crossX = this.width / 2;
      this.mouseY = this.crossY = this.height / 2;
      this.stage.addEventListener("stagemousemove", this.handleMouseMove);
      this.canvas.mousedown(this.handleClick);
      this.canvas.mousewheel(this.handleMouseWheel);
    }

    Overlay.prototype.resize = function(width, height) {
      return this.interval = gcd(this.width, this.height);
    };

    Overlay.prototype.init = function() {
      this.stage.removeAllChildren();
      this.simulation.renderer.removeParticle(this.tempObject);
      this.mouseX = this.crossX = this.width / 2;
      this.mouseY = this.crossY = this.height / 2;
      return this.stage.addChild(this.modeText);
    };

    Overlay.prototype.handleMouseWheel = function(ev) {
      var d;
      d = ev.deltaY;
      if (d < 0) {
        if (this.tempObject.radius > this.settings.global.minRadius) {
          return this.tempObject.radius -= 1;
        }
      } else {
        if (this.tempObject.radius < this.settings.global.maxRadius) {
          return this.tempObject.radius += 1;
        }
      }
    };

    Overlay.prototype.handleMouseMove = function(ev) {
      var dx, dy, g, gridX, gridY;
      this.mouseX = this.crossX = ev.stageX;
      this.mouseY = this.crossY = ev.stageY;
      if (!this.freePlace) {
        gridX = Math.round(this.mouseX / this.interval);
        gridY = Math.round(this.mouseY / this.interval);
        this.crossX = gridX * this.interval;
        this.crossY = gridY * this.interval;
      }
      switch (this.index) {
        case Overlay.INDEX_PLACE:
          this.velocityLine.x = this.crossX;
          this.velocityLine.y = this.crossY;
          if (this.tempObject !== null) {
            this.tempObject.x = this.crossX;
            this.tempObject.y = this.crossY;
          }
          this.velText.x = this.crossX;
          this.velText.y = this.crossY;
          break;
        case Overlay.INDEX_VELOCITY:
          g = this.velocityLine.graphics;
          dx = this.crossX - this.velocityLine.x;
          dy = this.crossY - this.velocityLine.y;
          this.velText.x = this.velocityLine.x + (dx / 2);
          this.velText.y = this.velocityLine.y + (dy / 2);
          this.velText.text = Math.round(Math.sqrt(dx * dx + dy * dy)) + " px/s";
          this.tempObject.xVel = dx / this.settings.global.updateRate;
          this.tempObject.yVel = dy / this.settings.global.updateRate;
          g.clear().beginStroke("red").setStrokeStyle(3).moveTo(0, 0).lineTo(dx, dy);
          break;
      }
    };

    Overlay.prototype.handleClick = function(ev) {
      var p, possibles, selected;
      if (ev.button === 2 && this.index !== Overlay.INDEX_MODIFY) {
        switch (this.index) {
          case Overlay.INDEX_PLACE:
            this.end();
            break;
          case Overlay.INDEX_VELOCITY:
            break;
        }
        this.reset();
      } else {
        switch (this.index) {
          case Overlay.INDEX_PLACE:
            this.velocityLine.graphics.clear();
            this.stage.addChild(this.velocityLine);
            this.stage.addChild(this.velText);
            this.index = Overlay.INDEX_VELOCITY;
            break;
          case Overlay.INDEX_VELOCITY:
            p = this.simulation.addParticle(this.tempObject.x, this.tempObject.y, this.tempObject.mass, this.tempObject.radius, this.tempObject.style);
            p.xVel = this.tempObject.xVel;
            p.yVel = this.tempObject.yVel;
            p.cOR = this.tempObject.cOR;
            this.stage.removeChild(this.velocityLine);
            this.stage.removeChild(this.velText);
            this.tempObject.xVel = this.tempObject.yVel = 0;
            if (this.mode === Overlay.MODE_EDIT && !this.copyPlace) {
              this.index = Overlay.INDEX_MODIFY;
              this.simulation.renderer.removeParticle(this.tempObject);
            } else {
              this.index = Overlay.INDEX_PLACE;
            }
            break;
          case Overlay.INDEX_MODIFY:
            possibles = this.simulation.renderer.getParticlesAtPos(this.mouseX, this.mouseY);
            if (possibles.length > 0) {
              selected = possibles[0].particle;
              this.simulation.removeParticle(selected);
              if (ev.button !== 2) {
                this.tempObject = selected.copy();
                this.particleRenderer = this.simulation.renderer.addParticle(this.tempObject);
                if (!this.copyPlace) {
                  this.simulation.removeSelected();
                }
                this.index = Overlay.INDEX_PLACE;
              }
            }
            break;
        }
      }
      return ev.stopPropagation();
    };

    Overlay.prototype.draw = function(interpolation) {
      var i, len, p, ref;
      if (!this.hidden) {
        if (this.index === Overlay.INDEX_MODIFY) {
          ref = this.simulation.renderer.getParticles();
          for (i = 0, len = ref.length; i < len; i++) {
            p = ref[i];
            if (this.simulation.renderer.isParticleAtPos(p, this.mouseX, this.mouseY)) {
              p.select();
            } else {
              p.deselect();
            }
          }
        }
        if (this.showError) {
          this.errorTimer -= 1000 / this.settings.global.updateRate;
          if (this.errorTimer <= 0) {
            this.showError = false;
            this.stage.removeChild(this.errorText);
          }
        }
        return this.stage.update();
      }
    };

    Overlay.prototype.reset = function() {
      this.stage.removeChild(this.velocityLine);
      this.stage.removeChild(this.velText);
      return this.index = Overlay.INDEX_PLACE;
    };

    Overlay.prototype.beginAdd = function(mass, cOR, style) {
      this.show();
      this.init();
      this.tempObject = new Particle(this.crossX, this.crossY, 25, style, this.settings);
      this.tempObject.mass = mass;
      this.tempObject.cOR = cOR;
      this.particleRenderer = this.simulation.renderer.addParticle(this.tempObject);
      this.velText.x = this.mouseX;
      this.velText.y = this.mouseY;
      this.modeText.text = "Mode: Add";
      this.index = Overlay.INDEX_PLACE;
      return this.mode = Overlay.MODE_ADD;
    };

    Overlay.prototype.beginEdit = function() {
      this.show();
      this.init();
      this.modeText.text = "Mode: Edit";
      this.index = Overlay.INDEX_MODIFY;
      return this.mode = Overlay.MODE_EDIT;
    };

    Overlay.prototype.end = function() {
      this.hide();
      this.simulation.renderer.removeParticle(this.tempObject);
      this.tempObject = null;
      this.mode = -1;
      this.freePlace = false;
      return this.copyPlace = false;
    };

    Overlay.prototype.getCurrentParticle = function() {
      return this.tempObject;
    };

    Overlay.prototype.getMode = function() {
      return this.mode;
    };

    return Overlay;

  })(Widget);

}).call(this);
