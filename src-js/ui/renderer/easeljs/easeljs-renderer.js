// Generated by CoffeeScript 1.10.0
(function() {
  var EaselJSRenderer, ParticleRenderer, SimulationRenderer,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ParticleRenderer = require('./particle-renderer');

  SimulationRenderer = require('../simulation-renderer');

  module.exports = EaselJSRenderer = (function(superClass) {
    extend(EaselJSRenderer, superClass);

    function EaselJSRenderer(canvasName, interpolator, settings) {
      this.canvasName = canvasName;
      this.interpolator = interpolator;
      this.settings = settings;
      EaselJSRenderer.__super__.constructor.call(this, this.canvasName, this.interpolator);
      this.stage = new createjs.Stage(this.canvasName);
      this.renderObjs = [];
      this.interpolator.addListener("before-update", (function(_this) {
        return function() {
          var j, len, particle, ref, results;
          ref = _this.renderObjs;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            particle = ref[j];
            results.push(particle.capture());
          }
          return results;
        };
      })(this));
    }

    EaselJSRenderer.prototype.addParticle = function(particle) {
      var pr;
      pr = new ParticleRenderer(particle, this.settings.simulation.enableSelection);
      particle.renderer = pr;
      this.stage.addChild(pr.displayObj);
      this.renderObjs.push(pr);
      return pr;
    };

    EaselJSRenderer.prototype.getParticlesAtPos = function(x, y) {
      var j, len, list, ref, renderable;
      list = [];
      ref = this.renderObjs;
      for (j = 0, len = ref.length; j < len; j++) {
        renderable = ref[j];
        if (this.isParticleAtPos(renderable, x, y)) {
          list.push(renderable);
        }
      }
      return list;
    };

    EaselJSRenderer.prototype.isParticleAtPos = function(particle, x, y) {
      var dx, dy, p;
      p = particle.particle;
      dx = p.x - x;
      dy = p.y - y;
      if (dx * dx + dy * dy <= p.radius * p.radius) {
        return true;
      }
      return false;
    };

    EaselJSRenderer.prototype.removeParticles = function(particles) {};

    EaselJSRenderer.prototype.removeParticle = function(particle) {
      var i, j, len, p, ref, results;
      ref = this.renderObjs;
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        p = ref[i];
        if (particle === p.particle) {
          particle.renderer = null;
          this.stage.removeChild(p.displayObj);
          this.renderObjs.splice(i, 1);
          break;
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    EaselJSRenderer.prototype.getParticles = function() {
      return this.renderObjs;
    };

    EaselJSRenderer.prototype.clear = function() {
      var j, len, p, ref;
      ref = this.renderObjs;
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        this.stage.removeChild(p.displayObj);
        p.particle = null;
      }
      return this.renderObjs = [];
    };

    EaselJSRenderer.prototype.draw = function(interpolation) {
      var j, len, particle, ref;
      ref = this.renderObjs;
      for (j = 0, len = ref.length; j < len; j++) {
        particle = ref[j];
        particle.draw(interpolation);
      }
      return this.stage.update();
    };

    return EaselJSRenderer;

  })(SimulationRenderer);

}).call(this);
