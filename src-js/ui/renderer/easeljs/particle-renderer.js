// Generated by CoffeeScript 1.10.0
(function() {
  var EventManager, Interpolator, ParticleRenderer, Point2D, Renderer,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Renderer = require("../renderer");

  Point2D = require("../../../math/point-2d");

  EventManager = require("../../../events/event-manager");

  Interpolator = require("../../../interpolator");

  module.exports = ParticleRenderer = (function(superClass) {
    var len;

    extend(ParticleRenderer, superClass);

    ParticleRenderer.prototype.pastPositions = [];

    ParticleRenderer.prototype.curPos = 0;

    function ParticleRenderer(particle, enableSelection) {
      this.particle = particle;
      this.enableSelection = enableSelection;
      this.displayObj = new createjs.Shape();
      this.lastX = this.particle.x;
      this.lastY = this.particle.y;
      this.selected = false;
      this.displayObj.x = this.particle.x;
      this.displayObj.y = this.particle.y;
      this.displayObj.addEventListener("click", (function(_this) {
        return function(ev) {
          if (_this.selected) {
            _this.fire("deselect", [ev, _this]);
            return _this.deselect();
          } else {
            _this.fire("select", [ev, _this]);
            return _this.select();
          }
        };
      })(this));
      this.tail = new createjs.Shape();
      this.tail.x = this.particle.x;
      this.tail.y = this.particle.y;
      EventManager.eventify(this);
    }

    ParticleRenderer.prototype.capture = function() {
      this.lastX = this.particle.x;
      return this.lastY = this.particle.y;
    };

    if (ParticleRenderer.enableSelection && ParticleRenderer.selected) {
      ParticleRenderer.curPos++;
      ParticleRenderer.curPos %= 20;
      len = ParticleRenderer.pastPositions.length;
      if (len < 20) {
        ParticleRenderer.pastPositions.push(new Point2D(ParticleRenderer.x, ParticleRenderer.y));
      } else {
        ParticleRenderer.pastPositions[ParticleRenderer.curPos] = new Point2D(ParticleRenderer.x, ParticleRenderer.y);
      }
    }

    ParticleRenderer.prototype.select = function() {
      return this.selected = true;
    };

    ParticleRenderer.prototype.deselect = function() {
      this.selected = false;
      return this.pastPositions = [];
    };

    ParticleRenderer.prototype.draw = function(interpolation) {
      var col, graphics, i, j, newX, newY, p, px, py, r_a, ref;
      newX = this.particle.x;
      newY = this.particle.y;
      if (interpolation > 0.0) {
        newX = Interpolator.interpolate(this.lastX, newX, interpolation);
        newY = Interpolator.interpolate(this.lastY, newY, interpolation);
      }
      this.displayObj.x = newX;
      this.displayObj.y = newY;
      graphics = this.displayObj.graphics;
      graphics.clear().beginFill(this.particle.style).drawCircle(0, 0, this.particle.radius).endFill();
      if (this.enableSelection && this.selected) {
        graphics.beginStroke("blue").setStrokeStyle(3).drawCircle(0, 0, this.particle.radius).endStroke();
        graphics = this.tail.graphics;
        graphics.clear();
        len = this.pastPositions.length;
        for (i = j = 0, ref = len - 1; j <= ref; i = j += 1) {
          p = this.pastPositions[(i + this.curPos) % len];
          px = p.x - this.particle.x;
          py = p.y - this.particle.y;
          r_a = i / len;
          col = "rgba(100, 100, 100, " + r_a + ")";
        }
        return graphics.beginStroke(col).drawCircle(px, py, this.particle.radius).endStroke();
      }
    };

    return ParticleRenderer;

  })(Renderer);

}).call(this);
