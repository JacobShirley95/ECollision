// Generated by CoffeeScript 1.10.0
(function() {
  var Particle, PhysicsObject,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PhysicsObject = require('./physics-object');

  module.exports = Particle = (function(superClass) {
    var curPos, pastPositions;

    extend(Particle, superClass);

    Particle.prototype.selected = false;

    Particle.prototype.cOR = 1.0;

    pastPositions = [];

    curPos = 0;

    function Particle(x, y, radius, style, settings1) {
      this.radius = radius;
      this.style = style;
      this.settings = settings1;
      Particle.__super__.constructor.call(this, x, y);
    }

    Particle.prototype.draw = function(x, y) {
      var col, graphics, i, j, len, p, px, py, r_a, ref;
      this.displayObj.x = x;
      this.displayObj.y = y;
      graphics = this.displayObj.graphics;
      graphics.clear();
      if (this.selected) {
        len = pastPositions.length;
        for (i = j = 1, ref = len; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
          p = pastPositions[(i + curPos) % len];
          px = p.x - x;
          py = p.y - y;
          r_a = i / len;
          col = "rgba(100, 100, 100, " + r_a + ")";
          graphics.beginStroke(col).drawCircle(px, py, this.radius).endStroke();
        }
        graphics.beginStroke("red").setStrokeStyle(3).drawCircle(0, 0, this.radius).endStroke();
      }
      graphics.beginFill(this.style).drawCircle(0, 0, this.radius).endFill();
      if (this.selected || settings.global.showVelocities) {
        return graphics.beginStroke("red").setStrokeStyle(3).moveTo(0, 0).lineTo(this.xVel * settings.global.updateRate, this.yVel * settings.global.updateRate).endStroke();
      }
    };

    Particle.prototype.select = function() {
      return this.selected = true;
    };

    Particle.prototype.deselect = function() {
      this.selected = false;
      return pastPositions = [];
    };

    Particle.prototype.update = function() {
      var len;
      this.x += this.xVel * this.settings.global.speedConst;
      this.y += this.yVel * this.settings.global.speedConst;
      len = pastPositions.length;
      if (this.selected) {
        curPos++;
        curPos %= this.settings.global.maxTraceLength;
        if (len < this.settings.global.maxTraceLength) {
          return pastPositions.push(new Point2D(this.x, this.y));
        } else {
          return pastPositions[curPos] = new Point2D(this.x, this.y);
        }
      }
    };

    Particle.prototype.copy = function() {
      var p;
      p = new Particle(this.x, this.y, this.radius, this.style, this.settings);
      p.index = this.index;
      p.cOR = this.cOR;
      p.mass = this.mass;
      p.xVel = this.xVel;
      p.yVel = this.yVel;
      return p;
    };

    return Particle;

  })(PhysicsObject);

}).call(this);
