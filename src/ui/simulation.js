// Generated by CoffeeScript 1.10.0
(function() {
  var Particle, Simulation, Widget,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Widget = require("./widget");

  Particle = require('../objects/particle');

  module.exports = Simulation = (function(superClass) {
    var selected;

    extend(Simulation, superClass);

    selected = -1;

    function Simulation(canvasName, engine1, settings) {
      this.engine = engine1;
      this.settings = settings;
      Simulation.__super__.constructor.call(this, canvasName);
      this.engine.width = this.width;
      this.engine.height = this.height;
    }

    Simulation.prototype.resize = function(newWidth, newHeight) {
      return this.engine.setBounds(newWidth, newHeight);
    };

    Simulation.prototype.addParticle = function(x, y, mass, radius, style) {
      var engine, particle, t;
      particle = new Particle(x, y, radius, style, this.settings);
      particle.mass = mass;
      engine = this.engine;
      t = this;
      particle.addEventHandler("click", function(ev) {
        var i, j, p, ref, results;
        p = engine.getParticle(selected);
        if (selected !== -1) {
          p.deselect();
          t.onDeselect(p);
        }
        results = [];
        for (i = j = 0, ref = this.engine.numOfParticles(); 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          p = engine.getParticle(i);
          if (p.displayObj === ev.target) {
            if (i !== selected) {
              t.onSelect(p);
              selected = i;
              p.selected = true;
            } else {
              selected = -1;
            }
            break;
          } else {
            results.push(void 0);
          }
        }
        return results;
      });
      this.stage.addChild(particle.displayObj);
      this.engine.particles.push(particle);
      return particle;
    };

    Simulation.onSelect = function(particle) {};

    Simulation.onDeselect = function(particle) {};

    Simulation.removeParticle = function(index) {
      this.stage.removeChild(this.engine.getParticle(index).displayObj);
      return this.engine.removeParticle(index);
    };

    Simulation.loadParticles = function(toBeLoaded) {
      var i, j, obj, particle, ref, results;
      this.restart();
      results = [];
      for (i = j = 0, ref = this.engine.numOfParticles(); 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        obj = toBeLoaded[i];
        particle = this.addParticle(obj.x, obj.y, obj.mass, obj.radius, obj.style);
        particle.xVel = obj.xVel;
        particle.yVel = obj.yVel;
        results.push(particle.cOR = obj.cOR);
      }
      return results;
    };

    Simulation.saveParticles = function(saved) {
      var i, j, obj, ref, results;
      results = [];
      for (i = j = 0, ref = engine.numOfParticles(); 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        obj = this.engine.getParticle(i);
        results.push(saved.push(obj.copy()));
      }
      return results;
    };

    Simulation.removeSelected = function() {
      if (selected !== -1) {
        this.removeParticle(selected);
        return selected = -1;
      }
    };

    Simulation.getSelected = function() {
      var sel;
      sel = null;
      if (selected !== -1) {
        sel = this.engine.getParticle(selected);
      }
      return sel;
    };

    Simulation.getSelectedID = function() {
      return selected;
    };

    Simulation.restart = function() {
      this.stage.removeAllChildren();
      selected = -1;
      return this.engine.reset();
    };

    Simulation.draw = function(interpolation) {
      var diffX, diffY, i, j, newX, newY, obj, ref;
      for (i = j = 0, ref = this.engine.numOfParticles(); 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        obj = this.engine.getParticle(i);
        newX = obj.x;
        newY = obj.y;
        if (this.settings.global.enableInterpolation) {
          diffX = obj.x - obj.lastX;
          diffY = obj.y - obj.lastY;
          newX = obj.lastX + (interpolation * diffX);
          newY = obj.lastY + (interpolation * diffY);
        }
        obj.draw(newX, newY);
      }
      return this.stage.update();
    };

    return Simulation;

  })(Widget);

}).call(this);
